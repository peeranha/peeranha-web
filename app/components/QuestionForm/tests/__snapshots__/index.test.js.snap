// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<QuestionForm /> snapshot test 1 1`] = `
<Connect(LanguageProvider)
  key="en"
  locale="en"
  messages={Object {}}
>
  <ConnectedRouter
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <QuestionForm
      change={[MockFunction]}
      form="form1"
      handleSubmit={[MockFunction]}
      invalid={false}
      postQuestion={[MockFunction]}
      profileInfo={true}
      questionLoading={false}
      submitting={false}
      translations={
        Object {
          "app.containers.AskQuestion.title": "content",
        }
      }
    />
  </ConnectedRouter>
</Connect(LanguageProvider)>
`;

exports[`<QuestionForm /> snapshot test 2 1`] = `
<Connect(LanguageProvider)
  key="en"
  locale="en"
  messages={Object {}}
>
  <ConnectedRouter
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <QuestionForm
      change={[MockFunction]}
      form="form1"
      handleSubmit={[MockFunction]}
      invalid={true}
      postQuestion={[MockFunction]}
      profileInfo={true}
      questionLoading={false}
      submitting={false}
      translations={
        Object {
          "app.containers.AskQuestion.title": "content",
        }
      }
    />
  </ConnectedRouter>
</Connect(LanguageProvider)>
`;

exports[`<QuestionForm /> snapshot test 3 1`] = `
<Connect(LanguageProvider)
  key="en"
  locale="en"
  messages={Object {}}
>
  <ConnectedRouter
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <QuestionForm
      change={[MockFunction]}
      form="form1"
      handleSubmit={[MockFunction]}
      invalid={true}
      postQuestion={[MockFunction]}
      profileInfo={true}
      questionLoading={false}
      submitting={true}
      translations={
        Object {
          "app.containers.AskQuestion.title": "content",
        }
      }
    />
  </ConnectedRouter>
</Connect(LanguageProvider)>
`;

exports[`<QuestionForm /> snapshot test 4 1`] = `
<Connect(LanguageProvider)
  key="en"
  locale="en"
  messages={Object {}}
>
  <ConnectedRouter
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <QuestionForm
      change={[MockFunction]}
      form="form1"
      handleSubmit={[MockFunction]}
      invalid={true}
      postQuestion={[MockFunction]}
      profileInfo={true}
      questionLoading={true}
      submitting={true}
      translations={
        Object {
          "app.containers.AskQuestion.title": "content",
        }
      }
    />
  </ConnectedRouter>
</Connect(LanguageProvider)>
`;
