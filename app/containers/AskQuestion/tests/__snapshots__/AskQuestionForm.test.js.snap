// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AskQuestionFormDefault /> snapshot test 1 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {},
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(LanguageProvider)
    key="en"
    locale="en"
    messages={Object {}}
  >
    <LanguageProvider
      dispatch={[Function]}
      locale="en"
      messages={Object {}}
    >
      <IntlProvider
        key="en"
        locale="en"
      >
        <ConnectedRouter
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <ReduxForm
              askQuestionLoading={false}
              handleSubmit={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              invalid={false}
              postQuestion={[MockFunction]}
              submitting={false}
              translations={
                Object {
                  "app.containers.AskQuestion.title": "content",
                }
              }
              userIsInSystem={true}
            >
              <Connect(Form(AskQuestionForm))
                askQuestionLoading={false}
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="AskQuestionForm"
                getFormState={[Function]}
                handleSubmit={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                invalid={false}
                keepDirtyOnReinitialize={false}
                persistentSubmitErrors={false}
                postQuestion={[MockFunction]}
                pure={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                submitting={false}
                touchOnBlur={true}
                touchOnChange={false}
                translations={
                  Object {
                    "app.containers.AskQuestion.title": "content",
                  }
                }
                updateUnregisteredFields={false}
                userIsInSystem={true}
              >
                <Form(AskQuestionForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  askQuestionLoading={false}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="AskQuestionForm"
                  getFormState={[Function]}
                  handleSubmit={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  initialize={[Function]}
                  initialized={false}
                  invalid={true}
                  keepDirtyOnReinitialize={false}
                  persistentSubmitErrors={false}
                  postQuestion={[MockFunction]}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  registeredFields={
                    Immutable.Map {
                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                        "name": "app/AskQuestion/FORM_TITLE",
                        "type": "Field",
                        "count": 1,
                      },
                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                        "name": "app/AskQuestion/FORM_CONTENT",
                        "type": "Field",
                        "count": 1,
                      },
                    }
                  }
                  reset={[Function]}
                  resetSection={[Function]}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  syncWarnings={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  translations={
                    Object {
                      "app.containers.AskQuestion.title": "content",
                    }
                  }
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  userIsInSystem={true}
                  valid={false}
                  validExceptSubmit={false}
                  values={Immutable.Map {}}
                >
                  <AskQuestionForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    askQuestionLoading={false}
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="AskQuestionForm"
                    handleSubmit={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    initialize={[Function]}
                    initialized={false}
                    invalid={true}
                    postQuestion={[MockFunction]}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    translations={
                      Object {
                        "app.containers.AskQuestion.title": "content",
                      }
                    }
                    untouch={[Function]}
                    userIsInSystem={true}
                    valid={false}
                  >
                    <Box>
                      <form
                        className="Box-cwadsP dNhCXU"
                      >
                        <h4
                          className="header text-uppercase"
                        >
                          content
                        </h4>
                        <div>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_TITLE"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_TITLE"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_TITLE"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextInputField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      name="app/AskQuestion/FORM_TITLE"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      placeholder=""
                                      type="text"
                                      value=""
                                    />
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextInputField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_CONTENT"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_CONTENT"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_CONTENT"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextEditorField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <TextEditor
                                      disabled={false}
                                      name="app/AskQuestion/FORM_CONTENT"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      value=""
                                    >
                                      <div>
                                        <SimpleMDEEditor
                                          disabled={false}
                                          events={Object {}}
                                          name="app/AskQuestion/FORM_CONTENT"
                                          onBlur={null}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          options={
                                            Object {
                                              "toolbar": Array [
                                                "bold",
                                                "italic",
                                                "heading",
                                                "|",
                                                "quote",
                                                "code",
                                                "unordered-list",
                                                "ordered-list",
                                                "clean-block",
                                                "link",
                                                "image",
                                                "horizontal-rule",
                                                "preview",
                                                "undo",
                                                "redo",
                                                "guide",
                                              ],
                                            }
                                          }
                                          value=""
                                        />
                                      </div>
                                    </TextEditor>
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextEditorField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                        </div>
                        <div>
                          <Connect(AuthenticatedButton)
                            buttonClass="btn btn-success form-control"
                            buttonType="submit"
                            disabled={true}
                            isLoading={false}
                            userIsInSystem={true}
                          >
                            <AuthenticatedButton
                              buttonClass="btn btn-success form-control"
                              buttonType="submit"
                              disabled={true}
                              dispatch={[Function]}
                              isLoading={false}
                              showLoginModalDispatch={[Function]}
                              userIsInSystem={null}
                            >
                              <button
                                className="btn btn-success form-control"
                                disabled={true}
                                onClick={[Function]}
                                type="submit"
                              />
                            </AuthenticatedButton>
                          </Connect(AuthenticatedButton)>
                        </div>
                      </form>
                    </Box>
                  </AskQuestionForm>
                </Form(AskQuestionForm)>
              </Connect(Form(AskQuestionForm))>
            </ReduxForm>
          </Router>
        </ConnectedRouter>
      </IntlProvider>
    </LanguageProvider>
  </Connect(LanguageProvider)>
</Provider>
`;

exports[`<AskQuestionFormDefault /> snapshot test 2 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {},
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(LanguageProvider)
    key="en"
    locale="en"
    messages={Object {}}
  >
    <LanguageProvider
      dispatch={[Function]}
      locale="en"
      messages={Object {}}
    >
      <IntlProvider
        key="en"
        locale="en"
      >
        <ConnectedRouter
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <ReduxForm
              askQuestionLoading={false}
              handleSubmit={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              invalid={true}
              postQuestion={[MockFunction]}
              submitting={false}
              translations={
                Object {
                  "app.containers.AskQuestion.title": "content",
                }
              }
              userIsInSystem={true}
            >
              <Connect(Form(AskQuestionForm))
                askQuestionLoading={false}
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="AskQuestionForm"
                getFormState={[Function]}
                handleSubmit={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                invalid={true}
                keepDirtyOnReinitialize={false}
                persistentSubmitErrors={false}
                postQuestion={[MockFunction]}
                pure={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                submitting={false}
                touchOnBlur={true}
                touchOnChange={false}
                translations={
                  Object {
                    "app.containers.AskQuestion.title": "content",
                  }
                }
                updateUnregisteredFields={false}
                userIsInSystem={true}
              >
                <Form(AskQuestionForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  askQuestionLoading={false}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="AskQuestionForm"
                  getFormState={[Function]}
                  handleSubmit={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  initialize={[Function]}
                  initialized={false}
                  invalid={true}
                  keepDirtyOnReinitialize={false}
                  persistentSubmitErrors={false}
                  postQuestion={[MockFunction]}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  registeredFields={
                    Immutable.Map {
                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                        "name": "app/AskQuestion/FORM_TITLE",
                        "type": "Field",
                        "count": 1,
                      },
                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                        "name": "app/AskQuestion/FORM_CONTENT",
                        "type": "Field",
                        "count": 1,
                      },
                    }
                  }
                  reset={[Function]}
                  resetSection={[Function]}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  syncWarnings={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  translations={
                    Object {
                      "app.containers.AskQuestion.title": "content",
                    }
                  }
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  userIsInSystem={true}
                  valid={false}
                  validExceptSubmit={false}
                  values={Immutable.Map {}}
                >
                  <AskQuestionForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    askQuestionLoading={false}
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="AskQuestionForm"
                    handleSubmit={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    initialize={[Function]}
                    initialized={false}
                    invalid={true}
                    postQuestion={[MockFunction]}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    translations={
                      Object {
                        "app.containers.AskQuestion.title": "content",
                      }
                    }
                    untouch={[Function]}
                    userIsInSystem={true}
                    valid={false}
                  >
                    <Box>
                      <form
                        className="Box-cwadsP dNhCXU"
                      >
                        <h4
                          className="header text-uppercase"
                        >
                          content
                        </h4>
                        <div>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_TITLE"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_TITLE"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_TITLE"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextInputField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      name="app/AskQuestion/FORM_TITLE"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      placeholder=""
                                      type="text"
                                      value=""
                                    />
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextInputField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_CONTENT"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_CONTENT"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_CONTENT"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextEditorField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <TextEditor
                                      disabled={false}
                                      name="app/AskQuestion/FORM_CONTENT"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      value=""
                                    >
                                      <div>
                                        <SimpleMDEEditor
                                          disabled={false}
                                          events={Object {}}
                                          name="app/AskQuestion/FORM_CONTENT"
                                          onBlur={null}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          options={
                                            Object {
                                              "toolbar": Array [
                                                "bold",
                                                "italic",
                                                "heading",
                                                "|",
                                                "quote",
                                                "code",
                                                "unordered-list",
                                                "ordered-list",
                                                "clean-block",
                                                "link",
                                                "image",
                                                "horizontal-rule",
                                                "preview",
                                                "undo",
                                                "redo",
                                                "guide",
                                              ],
                                            }
                                          }
                                          value=""
                                        />
                                      </div>
                                    </TextEditor>
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextEditorField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                        </div>
                        <div>
                          <Connect(AuthenticatedButton)
                            buttonClass="btn btn-success form-control"
                            buttonType="submit"
                            disabled={true}
                            isLoading={false}
                            userIsInSystem={true}
                          >
                            <AuthenticatedButton
                              buttonClass="btn btn-success form-control"
                              buttonType="submit"
                              disabled={true}
                              dispatch={[Function]}
                              isLoading={false}
                              showLoginModalDispatch={[Function]}
                              userIsInSystem={null}
                            >
                              <button
                                className="btn btn-success form-control"
                                disabled={true}
                                onClick={[Function]}
                                type="submit"
                              />
                            </AuthenticatedButton>
                          </Connect(AuthenticatedButton)>
                        </div>
                      </form>
                    </Box>
                  </AskQuestionForm>
                </Form(AskQuestionForm)>
              </Connect(Form(AskQuestionForm))>
            </ReduxForm>
          </Router>
        </ConnectedRouter>
      </IntlProvider>
    </LanguageProvider>
  </Connect(LanguageProvider)>
</Provider>
`;

exports[`<AskQuestionFormDefault /> snapshot test 3 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {},
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(LanguageProvider)
    key="en"
    locale="en"
    messages={Object {}}
  >
    <LanguageProvider
      dispatch={[Function]}
      locale="en"
      messages={Object {}}
    >
      <IntlProvider
        key="en"
        locale="en"
      >
        <ConnectedRouter
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <ReduxForm
              askQuestionLoading={false}
              handleSubmit={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              invalid={true}
              postQuestion={[MockFunction]}
              submitting={true}
              translations={
                Object {
                  "app.containers.AskQuestion.title": "content",
                }
              }
              userIsInSystem={true}
            >
              <Connect(Form(AskQuestionForm))
                askQuestionLoading={false}
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="AskQuestionForm"
                getFormState={[Function]}
                handleSubmit={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                invalid={true}
                keepDirtyOnReinitialize={false}
                persistentSubmitErrors={false}
                postQuestion={[MockFunction]}
                pure={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                submitting={true}
                touchOnBlur={true}
                touchOnChange={false}
                translations={
                  Object {
                    "app.containers.AskQuestion.title": "content",
                  }
                }
                updateUnregisteredFields={false}
                userIsInSystem={true}
              >
                <Form(AskQuestionForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  askQuestionLoading={false}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="AskQuestionForm"
                  getFormState={[Function]}
                  handleSubmit={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  initialize={[Function]}
                  initialized={false}
                  invalid={true}
                  keepDirtyOnReinitialize={false}
                  persistentSubmitErrors={false}
                  postQuestion={[MockFunction]}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  registeredFields={
                    Immutable.Map {
                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                        "name": "app/AskQuestion/FORM_TITLE",
                        "type": "Field",
                        "count": 1,
                      },
                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                        "name": "app/AskQuestion/FORM_CONTENT",
                        "type": "Field",
                        "count": 1,
                      },
                    }
                  }
                  reset={[Function]}
                  resetSection={[Function]}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  syncWarnings={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  translations={
                    Object {
                      "app.containers.AskQuestion.title": "content",
                    }
                  }
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  userIsInSystem={true}
                  valid={false}
                  validExceptSubmit={false}
                  values={Immutable.Map {}}
                >
                  <AskQuestionForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    askQuestionLoading={false}
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="AskQuestionForm"
                    handleSubmit={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    initialize={[Function]}
                    initialized={false}
                    invalid={true}
                    postQuestion={[MockFunction]}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    translations={
                      Object {
                        "app.containers.AskQuestion.title": "content",
                      }
                    }
                    untouch={[Function]}
                    userIsInSystem={true}
                    valid={false}
                  >
                    <Box>
                      <form
                        className="Box-cwadsP dNhCXU"
                      >
                        <h4
                          className="header text-uppercase"
                        >
                          content
                        </h4>
                        <div>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_TITLE"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_TITLE"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_TITLE"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextInputField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <input
                                      className="form-control"
                                      disabled={false}
                                      name="app/AskQuestion/FORM_TITLE"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      placeholder=""
                                      type="text"
                                      value=""
                                    />
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextInputField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                          <Field
                            component={[Function]}
                            disabled={false}
                            name="app/AskQuestion/FORM_CONTENT"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": false,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={false}
                              name="app/AskQuestion/FORM_CONTENT"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": false,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={false}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_CONTENT"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextEditorField
                                  disabled={false}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <TextEditor
                                      disabled={false}
                                      name="app/AskQuestion/FORM_CONTENT"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      value=""
                                    >
                                      <div>
                                        <SimpleMDEEditor
                                          disabled={false}
                                          events={Object {}}
                                          name="app/AskQuestion/FORM_CONTENT"
                                          onBlur={null}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          options={
                                            Object {
                                              "toolbar": Array [
                                                "bold",
                                                "italic",
                                                "heading",
                                                "|",
                                                "quote",
                                                "code",
                                                "unordered-list",
                                                "ordered-list",
                                                "clean-block",
                                                "link",
                                                "image",
                                                "horizontal-rule",
                                                "preview",
                                                "undo",
                                                "redo",
                                                "guide",
                                              ],
                                            }
                                          }
                                          value=""
                                        />
                                      </div>
                                    </TextEditor>
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextEditorField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                        </div>
                        <div>
                          <Connect(AuthenticatedButton)
                            buttonClass="btn btn-success form-control"
                            buttonType="submit"
                            disabled={true}
                            isLoading={false}
                            userIsInSystem={true}
                          >
                            <AuthenticatedButton
                              buttonClass="btn btn-success form-control"
                              buttonType="submit"
                              disabled={true}
                              dispatch={[Function]}
                              isLoading={false}
                              showLoginModalDispatch={[Function]}
                              userIsInSystem={null}
                            >
                              <button
                                className="btn btn-success form-control"
                                disabled={true}
                                onClick={[Function]}
                                type="submit"
                              />
                            </AuthenticatedButton>
                          </Connect(AuthenticatedButton)>
                        </div>
                      </form>
                    </Box>
                  </AskQuestionForm>
                </Form(AskQuestionForm)>
              </Connect(Form(AskQuestionForm))>
            </ReduxForm>
          </Router>
        </ConnectedRouter>
      </IntlProvider>
    </LanguageProvider>
  </Connect(LanguageProvider)>
</Provider>
`;

exports[`<AskQuestionFormDefault /> snapshot test 4 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {},
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(LanguageProvider)
    key="en"
    locale="en"
    messages={Object {}}
  >
    <LanguageProvider
      dispatch={[Function]}
      locale="en"
      messages={Object {}}
    >
      <IntlProvider
        key="en"
        locale="en"
      >
        <ConnectedRouter
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <ReduxForm
              askQuestionLoading={true}
              handleSubmit={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                    Array [
                      [MockFunction],
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
              invalid={true}
              postQuestion={[MockFunction]}
              submitting={true}
              translations={
                Object {
                  "app.containers.AskQuestion.title": "content",
                }
              }
              userIsInSystem={true}
            >
              <Connect(Form(AskQuestionForm))
                askQuestionLoading={true}
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="AskQuestionForm"
                getFormState={[Function]}
                handleSubmit={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                      Array [
                        [MockFunction],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                invalid={true}
                keepDirtyOnReinitialize={false}
                persistentSubmitErrors={false}
                postQuestion={[MockFunction]}
                pure={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                submitting={true}
                touchOnBlur={true}
                touchOnChange={false}
                translations={
                  Object {
                    "app.containers.AskQuestion.title": "content",
                  }
                }
                updateUnregisteredFields={false}
                userIsInSystem={true}
              >
                <Form(AskQuestionForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  askQuestionLoading={true}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="AskQuestionForm"
                  getFormState={[Function]}
                  handleSubmit={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                        Array [
                          [MockFunction],
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  initialize={[Function]}
                  initialized={false}
                  invalid={true}
                  keepDirtyOnReinitialize={false}
                  persistentSubmitErrors={false}
                  postQuestion={[MockFunction]}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  registeredFields={
                    Immutable.Map {
                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                        "name": "app/AskQuestion/FORM_TITLE",
                        "type": "Field",
                        "count": 1,
                      },
                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                        "name": "app/AskQuestion/FORM_CONTENT",
                        "type": "Field",
                        "count": 1,
                      },
                    }
                  }
                  reset={[Function]}
                  resetSection={[Function]}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  syncWarnings={
                    Object {
                      "app/AskQuestion/FORM_CONTENT": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                      "app/AskQuestion/FORM_TITLE": Object {
                        "defaultMessage": "Required field",
                        "id": "app.containers.AskQuestion.requiredField",
                      },
                    }
                  }
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  translations={
                    Object {
                      "app.containers.AskQuestion.title": "content",
                    }
                  }
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  userIsInSystem={true}
                  valid={false}
                  validExceptSubmit={false}
                  values={Immutable.Map {}}
                >
                  <AskQuestionForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    askQuestionLoading={true}
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="AskQuestionForm"
                    handleSubmit={
                      [MockFunction] {
                        "calls": Array [
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                          Array [
                            [MockFunction],
                          ],
                        ],
                        "results": Array [
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                          Object {
                            "isThrow": false,
                            "value": undefined,
                          },
                        ],
                      }
                    }
                    initialize={[Function]}
                    initialized={false}
                    invalid={true}
                    postQuestion={[MockFunction]}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    translations={
                      Object {
                        "app.containers.AskQuestion.title": "content",
                      }
                    }
                    untouch={[Function]}
                    userIsInSystem={true}
                    valid={false}
                  >
                    <Box>
                      <form
                        className="Box-cwadsP dNhCXU"
                      >
                        <h4
                          className="header text-uppercase"
                        >
                          content
                        </h4>
                        <div>
                          <Field
                            component={[Function]}
                            disabled={true}
                            name="app/AskQuestion/FORM_TITLE"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": true,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={true}
                              name="app/AskQuestion/FORM_TITLE"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": true,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={true}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_TITLE"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextInputField
                                  disabled={true}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <input
                                      className="form-control"
                                      disabled={true}
                                      name="app/AskQuestion/FORM_TITLE"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      placeholder=""
                                      type="text"
                                      value=""
                                    />
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextInputField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                          <Field
                            component={[Function]}
                            disabled={true}
                            name="app/AskQuestion/FORM_CONTENT"
                            validate={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                                [Function],
                              ]
                            }
                          >
                            <Connect(ConnectedField)
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "askQuestionLoading": true,
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "AskQuestionForm",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [MockFunction] {
                                    "calls": Array [
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                      Array [
                                        [MockFunction],
                                      ],
                                    ],
                                    "results": Array [
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                      Object {
                                        "isThrow": false,
                                        "value": undefined,
                                      },
                                    ],
                                  },
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "postQuestion": [MockFunction],
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_TITLE",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                    "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "app/AskQuestion/FORM_CONTENT": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                    "app/AskQuestion/FORM_TITLE": Object {
                                      "defaultMessage": "Required field",
                                      "id": "app.containers.AskQuestion.requiredField",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {
                                    "app.containers.AskQuestion.title": "content",
                                  },
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "userIsInSystem": true,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              component={[Function]}
                              disabled={true}
                              name="app/AskQuestion/FORM_CONTENT"
                              normalize={[Function]}
                              validate={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                  [Function],
                                ]
                              }
                            >
                              <ConnectedField
                                _reduxForm={
                                  Object {
                                    "anyTouched": false,
                                    "array": Object {
                                      "insert": [Function],
                                      "move": [Function],
                                      "pop": [Function],
                                      "push": [Function],
                                      "remove": [Function],
                                      "removeAll": [Function],
                                      "shift": [Function],
                                      "splice": [Function],
                                      "swap": [Function],
                                      "unshift": [Function],
                                    },
                                    "arrayInsert": [Function],
                                    "arrayMove": [Function],
                                    "arrayPop": [Function],
                                    "arrayPush": [Function],
                                    "arrayRemove": [Function],
                                    "arrayRemoveAll": [Function],
                                    "arrayShift": [Function],
                                    "arraySplice": [Function],
                                    "arraySwap": [Function],
                                    "arrayUnshift": [Function],
                                    "askQuestionLoading": true,
                                    "asyncErrors": undefined,
                                    "asyncValidate": [Function],
                                    "asyncValidating": false,
                                    "autofill": [Function],
                                    "blur": [Function],
                                    "change": [Function],
                                    "clearAsyncError": [Function],
                                    "clearFields": [Function],
                                    "clearSubmit": [Function],
                                    "clearSubmitErrors": [Function],
                                    "destroy": [Function],
                                    "destroyOnUnmount": true,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "enableReinitialize": false,
                                    "error": undefined,
                                    "focus": [Function],
                                    "forceUnregisterOnUnmount": false,
                                    "form": "AskQuestionForm",
                                    "getFormState": [Function],
                                    "getValues": [Function],
                                    "handleSubmit": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                        Array [
                                          [MockFunction],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                        Object {
                                          "isThrow": false,
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "initialValues": undefined,
                                    "initialize": [Function],
                                    "initialized": false,
                                    "invalid": true,
                                    "keepDirtyOnReinitialize": false,
                                    "persistentSubmitErrors": false,
                                    "postQuestion": [MockFunction],
                                    "pristine": true,
                                    "pure": true,
                                    "register": [Function],
                                    "registerField": [Function],
                                    "registerInnerOnSubmit": [Function],
                                    "registeredFields": Immutable.Map {
                                      "app/AskQuestion/FORM_TITLE": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_TITLE",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                      "app/AskQuestion/FORM_CONTENT": Immutable.Map {
                                        "name": "app/AskQuestion/FORM_CONTENT",
                                        "type": "Field",
                                        "count": 1,
                                      },
                                    },
                                    "reset": [Function],
                                    "resetSection": [Function],
                                    "sectionPrefix": undefined,
                                    "setSubmitFailed": [Function],
                                    "setSubmitSucceeded": [Function],
                                    "shouldAsyncValidate": [Function],
                                    "shouldError": [Function],
                                    "shouldValidate": [Function],
                                    "shouldWarn": [Function],
                                    "startAsyncValidation": [Function],
                                    "startSubmit": [Function],
                                    "stopAsyncValidation": [Function],
                                    "stopSubmit": [Function],
                                    "submit": [Function],
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "submitting": false,
                                    "syncErrors": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "syncWarnings": Object {
                                      "app/AskQuestion/FORM_CONTENT": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "app/AskQuestion/FORM_TITLE": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    },
                                    "touch": [Function],
                                    "touchOnBlur": true,
                                    "touchOnChange": false,
                                    "translations": Object {
                                      "app.containers.AskQuestion.title": "content",
                                    },
                                    "triggerSubmit": undefined,
                                    "unregister": [Function],
                                    "unregisterField": [Function],
                                    "untouch": [Function],
                                    "updateSyncErrors": [Function],
                                    "updateSyncWarnings": [Function],
                                    "updateUnregisteredFields": false,
                                    "userIsInSystem": true,
                                    "valid": false,
                                    "validExceptSubmit": false,
                                    "values": Immutable.Map {},
                                    "warning": undefined,
                                  }
                                }
                                asyncValidating={false}
                                component={[Function]}
                                dirty={false}
                                disabled={true}
                                dispatch={[Function]}
                                name="app/AskQuestion/FORM_CONTENT"
                                normalize={[Function]}
                                pristine={true}
                                syncError={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                syncWarning={
                                  Object {
                                    "defaultMessage": "Required field",
                                    "id": "app.containers.AskQuestion.requiredField",
                                  }
                                }
                                validate={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                                warn={
                                  Array [
                                    [Function],
                                    [Function],
                                  ]
                                }
                              >
                                <TextEditorField
                                  disabled={true}
                                  input={
                                    Object {
                                      "name": "app/AskQuestion/FORM_CONTENT",
                                      "onBlur": [Function],
                                      "onChange": [Function],
                                      "onDragStart": [Function],
                                      "onDrop": [Function],
                                      "onFocus": [Function],
                                      "value": "",
                                    }
                                  }
                                  meta={
                                    Object {
                                      "active": false,
                                      "asyncValidating": false,
                                      "autofilled": false,
                                      "dirty": false,
                                      "dispatch": [Function],
                                      "error": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                      "form": "AskQuestionForm",
                                      "initial": undefined,
                                      "invalid": true,
                                      "pristine": true,
                                      "submitFailed": false,
                                      "submitting": false,
                                      "touched": false,
                                      "valid": false,
                                      "visited": false,
                                      "warning": Object {
                                        "defaultMessage": "Required field",
                                        "id": "app.containers.AskQuestion.requiredField",
                                      },
                                    }
                                  }
                                >
                                  <div>
                                    <h6 />
                                    <TextEditor
                                      disabled={true}
                                      name="app/AskQuestion/FORM_CONTENT"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      value=""
                                    >
                                      <div>
                                        <SimpleMDEEditor
                                          disabled={true}
                                          events={Object {}}
                                          name="app/AskQuestion/FORM_CONTENT"
                                          onBlur={null}
                                          onChange={[Function]}
                                          onDragStart={[Function]}
                                          onDrop={[Function]}
                                          onFocus={[Function]}
                                          options={
                                            Object {
                                              "toolbar": Array [
                                                "bold",
                                                "italic",
                                                "heading",
                                                "|",
                                                "quote",
                                                "code",
                                                "unordered-list",
                                                "ordered-list",
                                                "clean-block",
                                                "link",
                                                "image",
                                                "horizontal-rule",
                                                "preview",
                                                "undo",
                                                "redo",
                                                "guide",
                                              ],
                                            }
                                          }
                                          value=""
                                        />
                                      </div>
                                    </TextEditor>
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </TextEditorField>
                              </ConnectedField>
                            </Connect(ConnectedField)>
                          </Field>
                        </div>
                        <div>
                          <Connect(AuthenticatedButton)
                            buttonClass="btn btn-success form-control"
                            buttonType="submit"
                            disabled={true}
                            isLoading={true}
                            userIsInSystem={true}
                          >
                            <AuthenticatedButton
                              buttonClass="btn btn-success form-control"
                              buttonType="submit"
                              disabled={true}
                              dispatch={[Function]}
                              isLoading={true}
                              showLoginModalDispatch={[Function]}
                              userIsInSystem={null}
                            >
                              <button
                                className="btn btn-success form-control"
                                disabled={true}
                                onClick={[Function]}
                                type="submit"
                              >
                                <LoadingIndicator>
                                  <Wrapper>
                                    <div
                                      className="Wrapper-ThVjl bNvReZ"
                                    >
                                      <Circle>
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG ehmTAR"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-1.1}
                                        rotate={30}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG zdGXL"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-1}
                                        rotate={60}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG hZmZmt"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.9}
                                        rotate={90}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG hmjUiu"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.8}
                                        rotate={120}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG SCPwQ"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.7}
                                        rotate={150}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG drXvaa"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.6}
                                        rotate={180}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG OJgdC"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.5}
                                        rotate={210}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG gZiMKx"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.4}
                                        rotate={240}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG okLMH"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.3}
                                        rotate={270}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG eaNyAy"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.2}
                                        rotate={300}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG eJcvxt"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                      <Circle
                                        delay={-0.1}
                                        rotate={330}
                                      >
                                        <Circle__CirclePrimitive>
                                          <div
                                            className="Circle__CirclePrimitive-cPqaOG iUFKZk"
                                          />
                                        </Circle__CirclePrimitive>
                                      </Circle>
                                    </div>
                                  </Wrapper>
                                </LoadingIndicator>
                              </button>
                            </AuthenticatedButton>
                          </Connect(AuthenticatedButton)>
                        </div>
                      </form>
                    </Box>
                  </AskQuestionForm>
                </Form(AskQuestionForm)>
              </Connect(Form(AskQuestionForm))>
            </ReduxForm>
          </Router>
        </ConnectedRouter>
      </IntlProvider>
    </LanguageProvider>
  </Connect(LanguageProvider)>
</Provider>
`;
