// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EmailLandingForm /> snapshot test 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "injectedReducers": Object {},
      "injectedSagas": Object {},
      "replaceReducer": [Function],
      "runSaga": [Function],
      "subscribe": [Function],
      Symbol(Symbol.observable): [Function],
    }
  }
>
  <Connect(LanguageProvider)
    key="en"
    locale="en"
    messages={Object {}}
  >
    <LanguageProvider
      dispatch={[Function]}
      locale="en"
      messages={Object {}}
    >
      <IntlProvider
        key="en"
        locale="en"
      >
        <ConnectedRouter
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "createHref": [Function],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
        >
          <Router
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
          >
            <ReduxForm
              button={
                Object {
                  "defaultMessage": "Peerania | FAQ",
                  "id": "app.containers.HomePage.faqTitle",
                }
              }
              form="form"
              handleSubmit={[Function]}
              sendEmail={[Function]}
              sendEmailLoading={true}
              translations={Object {}}
            >
              <Connect(Form(EmailLandingForm))
                button={
                  Object {
                    "defaultMessage": "Peerania | FAQ",
                    "id": "app.containers.HomePage.faqTitle",
                  }
                }
                destroyOnUnmount={true}
                enableReinitialize={false}
                forceUnregisterOnUnmount={false}
                form="form"
                getFormState={[Function]}
                handleSubmit={[Function]}
                keepDirtyOnReinitialize={false}
                persistentSubmitErrors={false}
                pure={true}
                sendEmail={[Function]}
                sendEmailLoading={true}
                shouldAsyncValidate={[Function]}
                shouldError={[Function]}
                shouldValidate={[Function]}
                shouldWarn={[Function]}
                touchOnBlur={true}
                touchOnChange={false}
                translations={Object {}}
                updateUnregisteredFields={false}
              >
                <Form(EmailLandingForm)
                  anyTouched={false}
                  array={
                    Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    }
                  }
                  arrayInsert={[Function]}
                  arrayMove={[Function]}
                  arrayPop={[Function]}
                  arrayPush={[Function]}
                  arrayRemove={[Function]}
                  arrayRemoveAll={[Function]}
                  arrayShift={[Function]}
                  arraySplice={[Function]}
                  arraySwap={[Function]}
                  arrayUnshift={[Function]}
                  asyncValidating={false}
                  autofill={[Function]}
                  blur={[Function]}
                  button={
                    Object {
                      "defaultMessage": "Peerania | FAQ",
                      "id": "app.containers.HomePage.faqTitle",
                    }
                  }
                  change={[Function]}
                  clearAsyncError={[Function]}
                  clearFields={[Function]}
                  clearSubmit={[Function]}
                  clearSubmitErrors={[Function]}
                  destroy={[Function]}
                  destroyOnUnmount={true}
                  dirty={false}
                  dispatch={[Function]}
                  enableReinitialize={false}
                  focus={[Function]}
                  forceUnregisterOnUnmount={false}
                  form="form"
                  getFormState={[Function]}
                  handleSubmit={[Function]}
                  initialize={[Function]}
                  initialized={false}
                  invalid={true}
                  keepDirtyOnReinitialize={false}
                  persistentSubmitErrors={false}
                  pristine={true}
                  pure={true}
                  registerField={[Function]}
                  registeredFields={
                    Immutable.Map {
                      "containers_homepage_email": Immutable.Map {
                        "name": "containers_homepage_email",
                        "type": "Field",
                        "count": 1,
                      },
                    }
                  }
                  reset={[Function]}
                  resetSection={[Function]}
                  sendEmail={[Function]}
                  sendEmailLoading={true}
                  setSubmitFailed={[Function]}
                  setSubmitSucceeded={[Function]}
                  shouldAsyncValidate={[Function]}
                  shouldError={[Function]}
                  shouldValidate={[Function]}
                  shouldWarn={[Function]}
                  startAsyncValidation={[Function]}
                  startSubmit={[Function]}
                  stopAsyncValidation={[Function]}
                  stopSubmit={[Function]}
                  submit={[Function]}
                  submitFailed={false}
                  submitSucceeded={false}
                  submitting={false}
                  syncErrors={
                    Object {
                      "containers_homepage_email": Object {
                        "defaultMessage": "Wrong email",
                        "id": "app.containers.AskQuestion.wrongEmail",
                      },
                    }
                  }
                  syncWarnings={
                    Object {
                      "containers_homepage_email": Object {
                        "defaultMessage": "Wrong email",
                        "id": "app.containers.AskQuestion.wrongEmail",
                      },
                    }
                  }
                  touch={[Function]}
                  touchOnBlur={true}
                  touchOnChange={false}
                  translations={Object {}}
                  unregisterField={[Function]}
                  untouch={[Function]}
                  updateSyncErrors={[Function]}
                  updateSyncWarnings={[Function]}
                  updateUnregisteredFields={false}
                  valid={false}
                  validExceptSubmit={false}
                  values={Immutable.Map {}}
                >
                  <EmailLandingForm
                    anyTouched={false}
                    array={
                      Object {
                        "insert": [Function],
                        "move": [Function],
                        "pop": [Function],
                        "push": [Function],
                        "remove": [Function],
                        "removeAll": [Function],
                        "shift": [Function],
                        "splice": [Function],
                        "swap": [Function],
                        "unshift": [Function],
                      }
                    }
                    asyncValidate={[Function]}
                    asyncValidating={false}
                    autofill={[Function]}
                    blur={[Function]}
                    button={
                      Object {
                        "defaultMessage": "Peerania | FAQ",
                        "id": "app.containers.HomePage.faqTitle",
                      }
                    }
                    change={[Function]}
                    clearAsyncError={[Function]}
                    clearFields={[Function]}
                    clearSubmit={[Function]}
                    clearSubmitErrors={[Function]}
                    destroy={[Function]}
                    dirty={false}
                    dispatch={[Function]}
                    form="form"
                    handleSubmit={[Function]}
                    initialize={[Function]}
                    initialized={false}
                    invalid={true}
                    pristine={true}
                    pure={true}
                    reset={[Function]}
                    resetSection={[Function]}
                    sendEmail={[Function]}
                    sendEmailLoading={true}
                    submit={[Function]}
                    submitFailed={false}
                    submitSucceeded={false}
                    submitting={false}
                    touch={[Function]}
                    translations={Object {}}
                    untouch={[Function]}
                    valid={false}
                  >
                    <form>
                      <div>
                        <Field
                          component={[Function]}
                          disabled={true}
                          name="containers_homepage_email"
                          validate={
                            Array [
                              [Function],
                            ]
                          }
                          warn={
                            Array [
                              [Function],
                            ]
                          }
                        >
                          <Connect(ConnectedField)
                            _reduxForm={
                              Object {
                                "anyTouched": false,
                                "array": Object {
                                  "insert": [Function],
                                  "move": [Function],
                                  "pop": [Function],
                                  "push": [Function],
                                  "remove": [Function],
                                  "removeAll": [Function],
                                  "shift": [Function],
                                  "splice": [Function],
                                  "swap": [Function],
                                  "unshift": [Function],
                                },
                                "arrayInsert": [Function],
                                "arrayMove": [Function],
                                "arrayPop": [Function],
                                "arrayPush": [Function],
                                "arrayRemove": [Function],
                                "arrayRemoveAll": [Function],
                                "arrayShift": [Function],
                                "arraySplice": [Function],
                                "arraySwap": [Function],
                                "arrayUnshift": [Function],
                                "asyncErrors": undefined,
                                "asyncValidate": [Function],
                                "asyncValidating": false,
                                "autofill": [Function],
                                "blur": [Function],
                                "button": Object {
                                  "defaultMessage": "Peerania | FAQ",
                                  "id": "app.containers.HomePage.faqTitle",
                                },
                                "change": [Function],
                                "clearAsyncError": [Function],
                                "clearFields": [Function],
                                "clearSubmit": [Function],
                                "clearSubmitErrors": [Function],
                                "destroy": [Function],
                                "destroyOnUnmount": true,
                                "dirty": false,
                                "dispatch": [Function],
                                "enableReinitialize": false,
                                "error": undefined,
                                "focus": [Function],
                                "forceUnregisterOnUnmount": false,
                                "form": "form",
                                "getFormState": [Function],
                                "getValues": [Function],
                                "handleSubmit": [Function],
                                "initialValues": undefined,
                                "initialize": [Function],
                                "initialized": false,
                                "invalid": true,
                                "keepDirtyOnReinitialize": false,
                                "persistentSubmitErrors": false,
                                "pristine": true,
                                "pure": true,
                                "register": [Function],
                                "registerField": [Function],
                                "registerInnerOnSubmit": [Function],
                                "registeredFields": Immutable.Map {
                                  "containers_homepage_email": Immutable.Map {
                                    "name": "containers_homepage_email",
                                    "type": "Field",
                                    "count": 1,
                                  },
                                },
                                "reset": [Function],
                                "resetSection": [Function],
                                "sectionPrefix": undefined,
                                "sendEmail": [Function],
                                "sendEmailLoading": true,
                                "setSubmitFailed": [Function],
                                "setSubmitSucceeded": [Function],
                                "shouldAsyncValidate": [Function],
                                "shouldError": [Function],
                                "shouldValidate": [Function],
                                "shouldWarn": [Function],
                                "startAsyncValidation": [Function],
                                "startSubmit": [Function],
                                "stopAsyncValidation": [Function],
                                "stopSubmit": [Function],
                                "submit": [Function],
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "submitting": false,
                                "syncErrors": Object {
                                  "containers_homepage_email": Object {
                                    "defaultMessage": "Wrong email",
                                    "id": "app.containers.AskQuestion.wrongEmail",
                                  },
                                },
                                "syncWarnings": Object {
                                  "containers_homepage_email": Object {
                                    "defaultMessage": "Wrong email",
                                    "id": "app.containers.AskQuestion.wrongEmail",
                                  },
                                },
                                "touch": [Function],
                                "touchOnBlur": true,
                                "touchOnChange": false,
                                "translations": Object {},
                                "triggerSubmit": undefined,
                                "unregister": [Function],
                                "unregisterField": [Function],
                                "untouch": [Function],
                                "updateSyncErrors": [Function],
                                "updateSyncWarnings": [Function],
                                "updateUnregisteredFields": false,
                                "valid": false,
                                "validExceptSubmit": false,
                                "values": Immutable.Map {},
                                "warning": undefined,
                              }
                            }
                            component={[Function]}
                            disabled={true}
                            name="containers_homepage_email"
                            normalize={[Function]}
                            validate={
                              Array [
                                [Function],
                              ]
                            }
                            warn={
                              Array [
                                [Function],
                              ]
                            }
                          >
                            <ConnectedField
                              _reduxForm={
                                Object {
                                  "anyTouched": false,
                                  "array": Object {
                                    "insert": [Function],
                                    "move": [Function],
                                    "pop": [Function],
                                    "push": [Function],
                                    "remove": [Function],
                                    "removeAll": [Function],
                                    "shift": [Function],
                                    "splice": [Function],
                                    "swap": [Function],
                                    "unshift": [Function],
                                  },
                                  "arrayInsert": [Function],
                                  "arrayMove": [Function],
                                  "arrayPop": [Function],
                                  "arrayPush": [Function],
                                  "arrayRemove": [Function],
                                  "arrayRemoveAll": [Function],
                                  "arrayShift": [Function],
                                  "arraySplice": [Function],
                                  "arraySwap": [Function],
                                  "arrayUnshift": [Function],
                                  "asyncErrors": undefined,
                                  "asyncValidate": [Function],
                                  "asyncValidating": false,
                                  "autofill": [Function],
                                  "blur": [Function],
                                  "button": Object {
                                    "defaultMessage": "Peerania | FAQ",
                                    "id": "app.containers.HomePage.faqTitle",
                                  },
                                  "change": [Function],
                                  "clearAsyncError": [Function],
                                  "clearFields": [Function],
                                  "clearSubmit": [Function],
                                  "clearSubmitErrors": [Function],
                                  "destroy": [Function],
                                  "destroyOnUnmount": true,
                                  "dirty": false,
                                  "dispatch": [Function],
                                  "enableReinitialize": false,
                                  "error": undefined,
                                  "focus": [Function],
                                  "forceUnregisterOnUnmount": false,
                                  "form": "form",
                                  "getFormState": [Function],
                                  "getValues": [Function],
                                  "handleSubmit": [Function],
                                  "initialValues": undefined,
                                  "initialize": [Function],
                                  "initialized": false,
                                  "invalid": true,
                                  "keepDirtyOnReinitialize": false,
                                  "persistentSubmitErrors": false,
                                  "pristine": true,
                                  "pure": true,
                                  "register": [Function],
                                  "registerField": [Function],
                                  "registerInnerOnSubmit": [Function],
                                  "registeredFields": Immutable.Map {
                                    "containers_homepage_email": Immutable.Map {
                                      "name": "containers_homepage_email",
                                      "type": "Field",
                                      "count": 1,
                                    },
                                  },
                                  "reset": [Function],
                                  "resetSection": [Function],
                                  "sectionPrefix": undefined,
                                  "sendEmail": [Function],
                                  "sendEmailLoading": true,
                                  "setSubmitFailed": [Function],
                                  "setSubmitSucceeded": [Function],
                                  "shouldAsyncValidate": [Function],
                                  "shouldError": [Function],
                                  "shouldValidate": [Function],
                                  "shouldWarn": [Function],
                                  "startAsyncValidation": [Function],
                                  "startSubmit": [Function],
                                  "stopAsyncValidation": [Function],
                                  "stopSubmit": [Function],
                                  "submit": [Function],
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "submitting": false,
                                  "syncErrors": Object {
                                    "containers_homepage_email": Object {
                                      "defaultMessage": "Wrong email",
                                      "id": "app.containers.AskQuestion.wrongEmail",
                                    },
                                  },
                                  "syncWarnings": Object {
                                    "containers_homepage_email": Object {
                                      "defaultMessage": "Wrong email",
                                      "id": "app.containers.AskQuestion.wrongEmail",
                                    },
                                  },
                                  "touch": [Function],
                                  "touchOnBlur": true,
                                  "touchOnChange": false,
                                  "translations": Object {},
                                  "triggerSubmit": undefined,
                                  "unregister": [Function],
                                  "unregisterField": [Function],
                                  "untouch": [Function],
                                  "updateSyncErrors": [Function],
                                  "updateSyncWarnings": [Function],
                                  "updateUnregisteredFields": false,
                                  "valid": false,
                                  "validExceptSubmit": false,
                                  "values": Immutable.Map {},
                                  "warning": undefined,
                                }
                              }
                              asyncValidating={false}
                              component={[Function]}
                              dirty={false}
                              disabled={true}
                              dispatch={[Function]}
                              name="containers_homepage_email"
                              normalize={[Function]}
                              pristine={true}
                              syncError={
                                Object {
                                  "defaultMessage": "Wrong email",
                                  "id": "app.containers.AskQuestion.wrongEmail",
                                }
                              }
                              syncWarning={
                                Object {
                                  "defaultMessage": "Wrong email",
                                  "id": "app.containers.AskQuestion.wrongEmail",
                                }
                              }
                              validate={
                                Array [
                                  [Function],
                                ]
                              }
                              warn={
                                Array [
                                  [Function],
                                ]
                              }
                            >
                              <DefaultInput
                                disabled={true}
                                input={
                                  Object {
                                    "name": "containers_homepage_email",
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onDragStart": [Function],
                                    "onDrop": [Function],
                                    "onFocus": [Function],
                                    "value": "",
                                  }
                                }
                                meta={
                                  Object {
                                    "active": false,
                                    "asyncValidating": false,
                                    "autofilled": false,
                                    "dirty": false,
                                    "dispatch": [Function],
                                    "error": Object {
                                      "defaultMessage": "Wrong email",
                                      "id": "app.containers.AskQuestion.wrongEmail",
                                    },
                                    "form": "form",
                                    "initial": undefined,
                                    "invalid": true,
                                    "pristine": true,
                                    "submitFailed": false,
                                    "submitting": false,
                                    "touched": false,
                                    "valid": false,
                                    "visited": false,
                                    "warning": Object {
                                      "defaultMessage": "Wrong email",
                                      "id": "app.containers.AskQuestion.wrongEmail",
                                    },
                                  }
                                }
                              >
                                <DefaultInput__Wrapper>
                                  <div
                                    className="DefaultInput__Wrapper-bFTbVB cMcbEk"
                                  >
                                    <input
                                      className="default-input false"
                                      disabled={true}
                                      name="containers_homepage_email"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onDragStart={[Function]}
                                      onDrop={[Function]}
                                      onFocus={[Function]}
                                      placeholder="Your email address"
                                      type="text"
                                      value=""
                                    />
                                    <h6
                                      className="text-danger"
                                    />
                                  </div>
                                </DefaultInput__Wrapper>
                              </DefaultInput>
                            </ConnectedField>
                          </Connect(ConnectedField)>
                        </Field>
                      </div>
                      <div>
                        <ContainedButton
                          content={
                            <FormattedMessage
                              defaultMessage="Peerania | FAQ"
                              id="app.containers.HomePage.faqTitle"
                              values={Object {}}
                            />
                          }
                          type="submit"
                        >
                          <ContainedButton__Wrapper
                            className="contained-button-wrapper"
                          >
                            <div
                              className="contained-button-wrapper ContainedButton__Wrapper-jdnubP biEZfx"
                            >
                              <WithStyles(Button)
                                className="contained-button"
                                type="submit"
                                variant="contained"
                              >
                                <Button
                                  className="contained-button"
                                  classes={
                                    Object {
                                      "colorInherit": "MuiButton-colorInherit-22",
                                      "contained": "MuiButton-contained-12",
                                      "containedPrimary": "MuiButton-containedPrimary-13",
                                      "containedSecondary": "MuiButton-containedSecondary-14",
                                      "disabled": "MuiButton-disabled-21",
                                      "extendedFab": "MuiButton-extendedFab-19",
                                      "fab": "MuiButton-fab-18",
                                      "flat": "MuiButton-flat-6",
                                      "flatPrimary": "MuiButton-flatPrimary-7",
                                      "flatSecondary": "MuiButton-flatSecondary-8",
                                      "focusVisible": "MuiButton-focusVisible-20",
                                      "fullWidth": "MuiButton-fullWidth-26",
                                      "label": "MuiButton-label-2",
                                      "mini": "MuiButton-mini-23",
                                      "outlined": "MuiButton-outlined-9",
                                      "outlinedPrimary": "MuiButton-outlinedPrimary-10",
                                      "outlinedSecondary": "MuiButton-outlinedSecondary-11",
                                      "raised": "MuiButton-raised-15",
                                      "raisedPrimary": "MuiButton-raisedPrimary-16",
                                      "raisedSecondary": "MuiButton-raisedSecondary-17",
                                      "root": "MuiButton-root-1",
                                      "sizeLarge": "MuiButton-sizeLarge-25",
                                      "sizeSmall": "MuiButton-sizeSmall-24",
                                      "text": "MuiButton-text-3",
                                      "textPrimary": "MuiButton-textPrimary-4",
                                      "textSecondary": "MuiButton-textSecondary-5",
                                    }
                                  }
                                  color="default"
                                  component="button"
                                  disableFocusRipple={false}
                                  disabled={false}
                                  fullWidth={false}
                                  mini={false}
                                  size="medium"
                                  type="submit"
                                  variant="contained"
                                >
                                  <WithStyles(ButtonBase)
                                    className="MuiButton-root-1 MuiButton-contained-12 MuiButton-raised-15 contained-button"
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="MuiButton-focusVisible-20"
                                    type="submit"
                                  >
                                    <ButtonBase
                                      centerRipple={false}
                                      className="MuiButton-root-1 MuiButton-contained-12 MuiButton-raised-15 contained-button"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-28",
                                          "focusVisible": "MuiButtonBase-focusVisible-29",
                                          "root": "MuiButtonBase-root-27",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      focusVisibleClassName="MuiButton-focusVisible-20"
                                      tabIndex="0"
                                      type="submit"
                                    >
                                      <button
                                        className="MuiButtonBase-root-27 MuiButton-root-1 MuiButton-contained-12 MuiButton-raised-15 contained-button"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="submit"
                                      >
                                        <span
                                          className="MuiButton-label-2"
                                        >
                                          <FormattedMessage
                                            defaultMessage="Peerania | FAQ"
                                            id="app.containers.HomePage.faqTitle"
                                            values={Object {}}
                                          >
                                            <span>
                                              Peerania | FAQ
                                            </span>
                                          </FormattedMessage>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={false}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={false}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-34",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-35",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-36",
                                                  "ripple": "MuiTouchRipple-ripple-31",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-33",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-32",
                                                  "root": "MuiTouchRipple-root-30",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-30"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-30"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </Button>
                              </WithStyles(Button)>
                            </div>
                          </ContainedButton__Wrapper>
                        </ContainedButton>
                      </div>
                    </form>
                  </EmailLandingForm>
                </Form(EmailLandingForm)>
              </Connect(Form(EmailLandingForm))>
            </ReduxForm>
          </Router>
        </ConnectedRouter>
      </IntlProvider>
    </LanguageProvider>
  </Connect(LanguageProvider)>
</Provider>
`;
